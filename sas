<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IT –°–ª–æ–≤–∞—Ä—å</title>
    <style>
        :root {
            --bg-color: #f0f0f0;
            --text-color: #333;
            --card-bg: white;
            --shadow: rgba(0, 0, 0, 0.1);
            --button-bg: #4CAF50;
            --button-hover: #45a049;
        }

        .dark-mode {
            --bg-color: #1a1a1a;
            --text-color: #f0f0f0;
            --card-bg: #2d2d2d;
            --shadow: rgba(0, 0, 0, 0.3);
            --button-bg: #2E7D32;
            --button-hover: #1B5E20;
        }

        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: background 0.3s, color 0.3s;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        h1 {
            text-align: center;
            color: var(--text-color);
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 20px 0;
            flex-wrap: wrap;
            gap: 10px;
        }

        .nav-buttons {
            display: flex;
            gap: 10px;
        }

        button, .theme-toggle {
            padding: 10px 20px;
            cursor: pointer;
            background-color: var(--button-bg);
            color: white;
            border: none;
            border-radius: 5px;
            transition: background 0.3s;
        }

        button:hover, .theme-toggle:hover {
            background-color: var(--button-hover);
        }

        .search-sort {
            display: flex;
            gap: 10px;
        }

        #search {
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 200px;
        }

        .cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }

        .card {
            background-color: var(--card-bg);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px var(--shadow);
            transition: transform 0.2s;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card h3 {
            color: var(--text-color);
            margin-top: 0;
        }

        .card p {
            color: var(--text-color);
            opacity: 0.9;
        }

        @media (max-width: 600px) {
            .controls {
                flex-direction: column;
            }
            .search-sort {
                width: 100%;
            }
            #search {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>IT –°–ª–æ–≤–∞—Ä—å</h1>
        
        <div class="controls">
            <div class="nav-buttons">
                <button onclick="showSlang()">–ñ–∞—Ä–≥–æ–Ω</button>
                <button onclick="showProfessional()">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ</button>
                <button onclick="sortAlphabetically()">–ê-–Ø</button>
            </div>
            
            <div class="search-sort">
                <input type="text" id="search" placeholder="–ü–æ–∏—Å–∫..." oninput="searchTerms()">
                <button class="theme-toggle" onclick="toggleTheme()">üåì –¢—ë–º–Ω–∞—è —Ç–µ–º–∞</button>
            </div>
        </div>

        <div id="content" class="cards-container"></div>
    </div>

    <script>
        // –ñ–∞—Ä–≥–æ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (40 –ø—Ä–∏–º–µ—Ä–æ–≤)
        const slangTerms = [
            { term: "–ë–∞–≥", definition: "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–µ" },
            { term: "–§–∏—á–∞", definition: "–§—É–Ω–∫—Ü–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã" },
            { term: "–ö—Ä–∞—à", definition: "–ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã" },
            { term: "–õ–∞–≥", definition: "–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã" },
            { term: "–ì–∏—Ç", definition: "–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π Git" },
            { term: "–†–µ–ª–∏–∑", definition: "–í—ã–ø—É—Å–∫ –≥–æ—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞" },
            { term: "–î–µ–±–∞–∂–∏—Ç—å", definition: "–ò—Å–∫–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏" },
            { term: "–ö–æ–¥ —Ä–µ–≤—å—é", definition: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∫–æ–ª–ª–µ–≥–∞–º–∏" },
            { term: "–ú–µ—Ä–∂–∏—Ç—å", definition: "–û–±—ä–µ–¥–∏–Ω—è—Ç—å –≤–µ—Ç–∫–∏ –∫–æ–¥–∞ (merge)" },
            { term: "–ü–∞—Ç—á", definition: "–ù–µ–±–æ–ª—å—à–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" },
            // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 30 —Ç–µ—Ä–º–∏–Ω–æ–≤...
        ];

        // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (40 –ø—Ä–∏–º–µ—Ä–æ–≤)
        const professionalTerms = [
            { term: "API", definition: "Application Programming Interface - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" },
            { term: "–°–£–ë–î", definition: "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö" },
            { term: "–ê–ª–≥–æ—Ä–∏—Ç–º", definition: "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏" },
            { term: "–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä", definition: "–ü—Ä–æ–≥—Ä–∞–º–º–∞, –ø–µ—Ä–µ–≤–æ–¥—è—â–∞—è –∫–æ–¥ –≤ –º–∞—à–∏–Ω–Ω—ã–π —è–∑—ã–∫" },
            { term: "–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è", definition: "–ü—Ä–∏–Ω—Ü–∏–ø –û–û–ü, —Å–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏" },
            { term: "–ö—ç—à", definition: "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö" },
            { term: "–î—Ä–∞–π–≤–µ—Ä", definition: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º" },
            { term: "–†–µ–∫—É—Ä—Å–∏—è", definition: "–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å–∞–º—É —Å–µ–±—è" },
            { term: "–§—Ä–µ–π–º–≤–æ—Ä–∫", definition: "–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" },
            { term: "–ë—ç–∫–µ–Ω–¥", definition: "–°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" },
            // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 30 —Ç–µ—Ä–º–∏–Ω–æ–≤...
        ];

        let currentTerms = [];
        let isDarkMode = false;

        // –ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤
        function searchTerms() {
            const searchText = document.getElementById('search').value.toLowerCase();
            const filteredTerms = currentTerms.filter(term => 
                term.term.toLowerCase().includes(searchText) || 
                term.definition.toLowerCase().includes(searchText)
            );
            renderTerms(filteredTerms);
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç –ê –¥–æ –Ø
        function sortAlphabetically() {
            const sortedTerms = [...currentTerms].sort((a, b) => 
                a.term.localeCompare(b.term)
            );
            renderTerms(sortedTerms);
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        function toggleTheme() {
            isDarkMode = !isDarkMode;
            document.body.classList.toggle('dark-mode', isDarkMode);
            localStorage.setItem('darkMode', isDarkMode);
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã –∏–∑ localStorage
        function loadTheme() {
            isDarkMode = localStorage.getItem('darkMode') === 'true';
            document.body.classList.toggle('dark-mode', isDarkMode);
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤
        function renderTerms(terms) {
            const container = document.getElementById('content');
            container.innerHTML = '';
            
            terms.forEach(term => {
                const card = document.createElement('div');
                card.className = 'card';
                card.innerHTML = `
                    <h3>${term.term}</h3>
                    <p>${term.definition}</p>
                `;
                container.appendChild(card);
            });
        }

        function showSlang() {
            currentTerms = slangTerms;
            renderTerms(slangTerms);
        }

        function showProfessional() {
            currentTerms = professionalTerms;
            renderTerms(professionalTerms);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        window.onload = function() {
            loadTheme();
            showSlang(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∂–∞—Ä–≥–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        };
    </script>
</body>
</html>
